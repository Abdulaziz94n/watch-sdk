#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef SMARTWATCHCODINGBLEKIT_SWIFT_H
#define SMARTWATCHCODINGBLEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SmartWatchCodingBleKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC22SmartWatchCodingBleKit9ABHBleLog")
@interface ABHBleLog : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 工具类，为方便Data和Object之间的转换。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit7BleData")
@interface BleData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 工具类，为方便从Data转换为Object。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleReadable")
@interface BleReadable : BleData
@end

@class NSString;

SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13ABHRealTimeHR")
@interface ABHRealTimeHR : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// CBPeripheral的包装类，代表与一个蓝牙设备的连接。
/// 1.在指定连接目标后会一直重连，直到连接成功。
/// 2.重连时会先查找系统已连接的设备，如果未找到，则扫描附近的设备。
/// 3.当检测到手机蓝牙开启时，如果之前有指定连接目标，会重新进行连接。
/// 4.连接成功后自动执行发现服务、开启通知和设置MTU。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BaseBleConnector")
@interface BaseBleConnector : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class CBCentralManager;
@class CBPeripheral;

@interface BaseBleConnector (SWIFT_EXTENSION(SmartWatchCodingBleKit)) <CBCentralManagerDelegate>
/// 监听手机蓝牙的状态。
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didUpdateANCSAuthorizationForPeripheral:(CBPeripheral * _Nonnull)peripheral SWIFT_AVAILABILITY(ios,introduced=13.0);
@end

@class CBService;
@class CBCharacteristic;

@interface BaseBleConnector (SWIFT_EXTENSION(SmartWatchCodingBleKit)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheralIsReadyToSendWriteWithoutResponse:(CBPeripheral * _Nonnull)peripheral;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleActivity")
@interface BleActivity : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 工具类，为方便从Object转换为Data。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleWritable")
@interface BleWritable : BleReadable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleAddressBook")
@interface BleAddressBook : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleAerobicSettings")
@interface BleAerobicSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 手机发送agps前置条件给设备
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleAgpsPrerequisite")
@interface BleAgpsPrerequisite : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 特殊的类，放入缓存前必须指定一个0~0xfe之间的，并且与缓存中该类其他实例不同的一id，通过该id可以标识设备和本地缓存上该类的唯一实例。
/// 一般的对象，比如[BleGestureWake]、[BleSedentarinessSettings]和[BleHrMonitoringSettings]等在缓存中最多只有一个实例，
/// 所以无须id，每次修改都是修改该唯一实例。
/// 但是有些对象，比如[BleAlarm]、[BleSchedule]和[BleCoaching]等，缓存的是一个列表。根据协议，修改和删除时必须指定id来确定要操作
/// 是哪个目标实例，该类就是为处理这种情况。
/// id属性是框架内部处理的：
/// 1.当发送创建指令时，调用[BleConnector.sendObject]创建单个对象或[BleConnector.sendArray]创建多个对象，框架内部会为每个对象
/// 分配一个0~0xfe之间还未缓存的id，然后发送给设备并将其追加到本地缓存列表末尾。
/// 2.当发送删除指令时，调用[BleConnector.sendInt8]，在把该id发送给设备后，设备会删除该对象，框架内部也会根据id在已缓存列表找到与之
/// 匹配的实例，并将其从缓存中移除，如果id为[ID_ALL]，会清空设备和本地缓存中该类所有实例。
/// 3.当发送修改指令时，调用[BleConnector.sendObject]，在把该对象发送给设备后，设备会根据id修改该对象，框架内部会根据该对象的id在
/// 已缓存列表找到与之匹配的实例，并将其原地替换。
/// 4.当发送读取指令时，调用[BleConnector.sendInt8]，在把该id发送给设备后，设备会根据id查找与之匹配的实例，并回复给手机，如果id为
/// [ID_ALL]，则设置会查找该类所有实例，并将其返回。
/// 5.当发送重置指令时，框架内部会从0开始依次为其分配一个id，然后先[BleConnector.sendInt8]让设备删除已有的所有实例，接着调用
/// [BleConnector.sendArray]创新新的列表以实现重置的效果，同时本地也会用新的列表覆盖旧的列表。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleIdObject")
@interface BleIdObject : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleAlarm")
@interface BleAlarm : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleAlipaySettings")
@interface BleAlipaySettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 平均心率
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleAvgHeartRate")
@interface BleAvgHeartRate : BleReadable
@end


/// 酒精浓度
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit6BleBAC")
@interface BleBAC : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 酒精含量测试结果提示设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleBACResultSettings")
@interface BleBACResultSettings : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleBleAddress")
@interface BleBleAddress : BleReadable
@end


/// 血糖
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleBloodGlucose")
@interface BleBloodGlucose : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleBloodOxyGenSettings")
@interface BleBloodOxyGenSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleBloodOxygen")
@interface BleBloodOxygen : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleBloodPressure")
@interface BleBloodPressure : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 身体数据
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleBodyStatus")
@interface BleBodyStatus : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleCalorieIntake")
@interface BleCalorieIntake : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 不支持[BleConnector.sendArray]，所以不能一次创建多个，也不能执行重置操作。
/// 也不支持[BleConnector.sendInt8]，删除时只需要删除本地缓存。
/// 读取时只支持[ID_ALL]，不支持读取单个，而且设备并不是返回该类的列表，而是[BleCoachingIds]对象，里面包含了设备上已存在的实例的id列表。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleCoaching")
@interface BleCoaching : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleCoachingIds")
@interface BleCoachingIds : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleCoachingSegment")
@interface BleCoachingSegment : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleConnector")
@interface BleConnector : BaseBleConnector
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleContactPerson")
@interface BleContactPerson : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit9BleDevice")
@interface BleDevice : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleDeviceInfo")
@interface BleDeviceInfo : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 精简的设备信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleDeviceInfo2")
@interface BleDeviceInfo2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleDeviceLanguages")
@interface BleDeviceLanguages : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleDeviceSportData")
@interface BleDeviceSportData : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleDrinkWaterSettings")
@interface BleDrinkWaterSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleFileTransmission")
@interface BleFileTransmission : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleFoodBalance")
@interface BleFoodBalance : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleGameSettings")
@interface BleGameSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleGameTimeReminder")
@interface BleGameTimeReminder : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleGestureWake")
@interface BleGestureWake : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 女性生理期周期
/// 生理期 -> 安全期 -> 排卵期 -> 安全期 -> 生理期
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleGirlCarePeriod")
@interface BleGirlCarePeriod : BleReadable
@end


/// 女性生理期周期开始日期
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleGirlCarePeriodDate")
@interface BleGirlCarePeriodDate : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class BleSedentarinessSettings;
@class BleNoDisturbSettings;
@class BleMedicationAlarm;
@class BleLanguagePackVersion;
@class BleHeartRate;
@class BleSleep;
@class BleSleepQuality;
@class BleWorkOut;
@class BleWorkOut2;
@class BleMatchRecord;
@class BleMatchRecord2;
@class BleLocation;
@class BleTemperature;
@class BleHeartRateVariability;
@class BlePressure;
@class NSData;
@class BleLogText;
@class BleWashSettings;
@class BlePhoneWorkOutStatus;
@class BleWatchFaceId;
@class BleWorldClock;
@class BleStock;
@class BleRealTimeMeasurement;
@class BleLoveTapUser;
@class BleLoveTap;
@class BleMedicationReminder;
@class BleHrMonitoringSettings;
@class BleThirdPartyData;
@class BleMindStatus;
@class BlePackageStatus;
@class BleUserProfile;
@class BleSettingWatchPassword;
@class BleRecordPacket;
@class BleNaviInfo;
@class BleSOSSettings;
@class BleHealthCare;

SWIFT_PROTOCOL("_TtP22SmartWatchCodingBleKit17BleHandleDelegate_")
@protocol BleHandleDelegate
@optional
/// 设备连接成功时触发。
- (void)onDeviceConnected:(CBPeripheral * _Nonnull)peripheral;
/// 设备正在连接时触发。
- (void)onDeviceConnecting:(BOOL)status;
/// 绑定时触发。
- (void)onIdentityCreate:(BOOL)status :(BleDeviceInfo * _Nullable)deviceInfo;
/// 解绑时触发。
- (void)onIdentityDelete:(BOOL)status;
/// 设备主动解绑时触发。
- (void)onIdentityDeleteByDevice:(BOOL)status;
/// 当读取设备信息时返回
- (void)onReadDeviceInfo:(BOOL)status :(BleDeviceInfo * _Nonnull)deviceInfo;
/// 获取手表信息, 设备基础信息返回
- (void)onReadDeviceInfo2:(BleDeviceInfo2 * _Nonnull)deviceInfo2;
/// 连接状态变化时触发。
- (void)onSessionStateChange:(BOOL)status;
/// 设备回复某些指令时触发。
- (void)onCommandReply:(NSInteger)bleKey :(NSInteger)bleKeyFlag :(BOOL)status;
/// 设备进入OTA时触发。
- (void)onOTA:(BOOL)status;
/// MTK设备返回固件信息，该信息需要通过[BleConnector.SERVICE_MTK]和[BleConnector.CH_MTK_OTA_META]来读取，
/// 设备返回该信息后会通过[BleCache.putMtkOtaMeta]保存该信息，然后通过[BleCache.getMtkOtaMeta]可以获取该信息。
/// mid=xx;mod=xx;oem=xx;pf=xx;p_id=xx;p_sec=xx;ver=xx;d_ty=xx;
- (void)onReadMtkOtaMeta;
- (void)onXModem:(uint8_t)status;
/// 设备返回电量时触发。
- (void)onReadPower:(NSInteger)power;
/// 设备返回固件版本时触发。
- (void)onReadFirmwareVersion:(NSString * _Nonnull)version;
/// 设备返回mac地址时触发。
- (void)onReadBleAddress:(NSString * _Nonnull)address;
/// 设备返回久坐设置时触发。
- (void)onReadSedentariness:(BleSedentarinessSettings * _Nonnull)sedentarinessSettings;
/// 设备返回勿扰设置时触发。
- (void)onReadNoDisturb:(BleNoDisturbSettings * _Nonnull)noDisturbSettings;
/// 设备端修改勿扰设置时触发。
- (void)onNoDisturbUpdate:(BleNoDisturbSettings * _Nonnull)noDisturbSettings;
/// 设备返回闹钟列表时触发。
- (void)onReadAlarm:(NSArray<BleAlarm *> * _Nonnull)alarms;
/// 设备端修改闹钟时触发。
- (void)onAlarmUpdate:(BleAlarm * _Nonnull)alarm;
/// 设备端删除闹钟时触发。
- (void)onAlarmDelete:(NSInteger)id;
/// 设备端创建闹钟时触发。
- (void)onAlarmAdd:(BleAlarm * _Nonnull)alarm;
/// 设备返回吃药闹钟列表时触发。
- (void)onReadMedicationAlarm:(NSArray<BleMedicationAlarm *> * _Nonnull)medicationAlarm;
/// 设备端修改吃药闹钟时触发。
- (void)onMedicationAlarmUpdate:(BleMedicationAlarm * _Nonnull)medicationAlarm;
/// 设备端删除吃药闹钟时触发。
- (void)onMedicationAlarmDelete:(NSInteger)id;
/// 设备端创建吃药闹钟时触发。
- (void)onMedicationAlarmAdd:(BleMedicationAlarm * _Nonnull)medicationAlarm;
/// 设备返回Coaching id时触发。
- (void)onReadCoachingIds:(BleCoachingIds * _Nonnull)coachingIds;
/// 当设备发起找手机触发。
- (void)onFindPhone:(BOOL)start;
/// 设备返回UI包版本时触发，BleDeviceInfo.PLATFORM_REALTEK专属。
- (void)onReadUiPackVersion:(NSString * _Nonnull)version;
/// 设备返回语言包信息时触发，BleDeviceInfo.PLATFORM_REALTEK专属。
- (void)onReadLanguagePackVersion:(BleLanguagePackVersion * _Nonnull)version;
/// 同步数据时触发。
/// @param syncState SyncState
/// @param bleKey 正在同步的数据类型
- (void)onSyncData:(NSInteger)syncState :(NSInteger)bleKey;
/// 当设备返回BleActivity时触发。
- (void)onReadActivity:(NSArray<BleActivity *> * _Nonnull)activities;
/// 当设备返回BleHeartRate时触发。
- (void)onReadHeartRate:(NSArray<BleHeartRate *> * _Nonnull)heartRates;
/// 当设备返回BleBloodPressure时触发。
- (void)onReadBloodPressure:(NSArray<BleBloodPressure *> * _Nonnull)bloodPressures;
/// 当设备返回BleSleep时触发。
- (void)onReadSleep:(NSArray<BleSleep *> * _Nonnull)sleeps;
/// 当设备返回BleSleep时触发。
- (void)onReadSleepQuality:(BleSleepQuality * _Nonnull)sleepQuality;
/// 当设备返回BleWorkout时触发。
- (void)onReadWorkOut:(NSArray<BleWorkOut *> * _Nonnull)WorkOut;
- (void)onReadWorkOut2:(NSArray<BleWorkOut2 *> * _Nonnull)WorkOut;
/// 当设备返回[BleMatchRecord]时触发。
- (void)onReadMatchRecord:(NSArray<BleMatchRecord *> * _Nonnull)matchRecord;
/// 当设备返回[BleMatchRecord2]时触发。
- (void)onReadMatchRecord2:(NSArray<BleMatchRecord2 *> * _Nonnull)matchRecord2;
/// 当设备返回BleLocation时触发。
- (void)onReadLocation:(NSArray<BleLocation *> * _Nonnull)locations;
/// <ul>
///   <li>
///     当设备返回BleTemperature时触发。
///   </li>
/// </ul>
- (void)onReadTemperature:(NSArray<BleTemperature *> * _Nonnull)temperatures;
/// <ul>
///   <li>
///     当设备返回BleBloodOxygen时触发。
///   </li>
/// </ul>
- (void)onReadBloodOxygen:(NSArray<BleBloodOxygen *> * _Nonnull)BloodOxygen;
/// <ul>
///   <li>
///     当设备返回 [BleBloodGlucose] 血糖时触发。
///   </li>
/// </ul>
- (void)onReadBloodGlucose:(NSArray<BleBloodGlucose *> * _Nonnull)bloodGlucose;
/// <ul>
///   <li>
///     当设备返回BleHeartRateVariability时触发。
///   </li>
/// </ul>
- (void)onReadHeartRateVariability:(NSArray<BleHeartRateVariability *> * _Nonnull)HeartRateVariability;
/// <ul>
///   <li>
///     当设备返回TemperatureUnit时触发。
///     0 ->℃
///     1 ->℉
///   </li>
/// </ul>
- (void)onReadTemperatureUnitSettings:(NSInteger)value;
/// <ul>
///   <li>
///     当设备返回DateFormatSetting时触发。
///     0 ->YYYY/MM/dd
///     1 ->dd/MM/YYYY
///     2 ->MM/dd/YYYY
///   </li>
/// </ul>
- (void)onReadDateFormatSettings:(NSInteger)status;
/// <ul>
///   <li>
///     当设备返回BleAerobicSettings时触发。
///   </li>
/// </ul>
- (void)onReadAerobicSettings:(BleAerobicSettings * _Nonnull)AerobicSettings;
/// <ul>
///   <li>
///     当设备返回BlePressure时触发。
///   </li>
/// </ul>
- (void)onReadPressures:(NSArray<BlePressure *> * _Nonnull)pressures;
/// 设备主动执行拍照相关操作时触发。
/// @param cameraState: CameraState
- (void)onCameraStateChange:(NSInteger)cameraState;
/// 设备请求定位时触发，一些无Gps设备在锻炼时会请求手机定位。
/// @param workoutState WorkoutState
- (void)onPhoneGPSSport:(NSInteger)workoutState;
/// 手机执行拍照相关操作，设备回复时触发。
/// 手机发起后设备响应。用于确认设备是否能立即响应手机发起的操作，比如设备在某些特定界面是不能进入相机的，
/// 如果手机发起进入相机指令，设备会回复失败
/// cameraState: CameraState
- (void)onCameraResponse:(BOOL)status :(NSInteger)cameraState;
/// 调用BleConnector.sendStream后触发，用于回传发送进度。
- (void)onStreamProgress:(BOOL)status :(NSInteger)errorCode :(NSInteger)total :(NSInteger)completed;
/// 设备开启Gps时，如果检测到没有aGps文件，或aGps文件已过期，设备发起请求aGps文件。
/// url aGps文件的下载链接。
- (void)onDeviceRequestAGpsFile:(NSString * _Nonnull)url;
/// 读取设备多媒体文件时回调
- (void)onReadMediaFile:(BleFileTransmission * _Nonnull)media;
/// 返回设备睡眠原始数据,此数据为固件分析用,保存即可
- (void)onReadSleepRaw:(NSData * _Nonnull)sleepRawData;
/// 设备语言环境主动跟随手机触时发
- (void)onFollowSystemLanguage:(BOOL)systemLanguage;
/// 设备主动要求更新天气信息
- (void)onReadWeatherRealtime:(BOOL)update;
/// 0x050B 设备运行日志
- (void)onReadDataLog:(NSArray<BleLogText *> * _Nonnull)logs;
/// 0x021F 读取设备当前设置表盘
- (void)onReadWatchFaceSwitch:(NSInteger)value;
/// 0x021F 设置表盘callback
/// status -> false 表盘不存在,数组越界
- (void)onUpdateWatchFaceSwitch:(BOOL)status;
/// 0x0220
/// 设备主动调用,app端定位成功后发BleAgpsPrerequisite到设备
- (void)onRequestAgpsPrerequisite;
/// 0x0221
/// * 设备返回喝水提醒设置时触发。
- (void)onReadDrinkWaterSettings:(BleDrinkWaterSettings * _Nonnull)drinkWater;
/// 0x0225
/// * 设备返回血氧监测设置时触发。
- (void)onReadBloodOxyGenSettings:(BleBloodOxyGenSettings * _Nonnull)bloodOxyGenSet;
/// 0x0226
/// * 设备返回洗手提醒设置时触发。
- (void)onReadWashSettings:(BleWashSettings * _Nonnull)washSet;
/// appd端更新设置指令回调
- (void)onUpdateSettings:(NSInteger)bleKey;
/// 设备端主动传输心率
- (void)onUpdateRealTimeHR:(ABHRealTimeHR * _Nonnull)itemHR;
/// 设备端主动传输体温
- (void)onUpdateRealTimeTemperature:(BleTemperature * _Nonnull)temperature;
/// 设备端主动传输血压
- (void)onUpdateRealTimeBloodPressure:(BleBloodPressure * _Nonnull)bloodPressures;
/// 手机运动模式
- (void)onUpdatePhoneWorkOutStatus:(BlePhoneWorkOutStatus * _Nonnull)status;
/// 设备主动更新震动状态
- (void)onVibrationUpdate:(NSInteger)value;
/// 获取设备iBeacon开关状态
/// 0 -> off
/// 1 -> on
- (void)onReadiBeaconStatus:(NSInteger)value;
/// 获取设备watchface ID列表
- (void)onReadWatchFaceId:(BleWatchFaceId * _Nonnull)watchFaceId;
/// 设置新watchface ID 回调,接到此回调开始传输表盘文件
- (void)onWatchFaceIdUpdate:(BOOL)status;
/// 设置新watchface ID 回调,接到此回调开始传输表盘文件
- (void)onCommandSendTimeout:(NSInteger)bleKey :(NSInteger)bleKeyFlag;
/// 设备返回世界时钟列表时触发
- (void)onReadWorldClock:(NSArray<BleWorldClock *> * _Nonnull)worldClocks;
/// 设备端删除世界时钟时触发
- (void)onWorldClockDelete:(NSInteger)clockID;
/// 设备返回股票列表时触发
- (void)onReadStock:(NSArray<BleStock *> * _Nonnull)stocks;
/// 设备删除股票列表时触发
- (void)onStockDelete:(NSInteger)stockID;
/// 设备主动请求更新股票列表时触发
- (void)onDeviceReadStock:(BOOL)status;
/// 测量结束后会触发回调, 如果超过60s没有响应, 可能测量失败
- (void)onRealTimeMeasurement:(BleRealTimeMeasurement * _Nonnull)measurement;
/// <ul>
///   <li>
///     设备返回当前省电模式状态时触发。
///   </li>
///   <li>
///     @param state [PowerSaveModeState]
///   </li>
/// </ul>
- (void)onPowerSaveModeState:(NSInteger)state;
/// <ul>
///   <li>
///     设备的省电模式状态变化时触发。
///   </li>
///   <li>
///     @param state [PowerSaveModeState]
///   </li>
/// </ul>
- (void)onPowerSaveModeStateChange:(NSInteger)state;
/// 设备端修改背光设置时触发，返回次数
/// @param value [设置的背光值]
- (void)onBacklightupdate:(NSInteger)value;
/// <ul>
///   <li>
///     设备返回当前抬手亮屏设置状态时触发。
///   </li>
///   <li>
///     @param state [BleGestureWake]
///   </li>
/// </ul>
- (void)onReadGestureWake:(BleGestureWake * _Nonnull)bleGestureWake;
/// <ul>
///   <li>
///     设备的抬手亮屏设置状态变化时触发。
///   </li>
///   <li>
///     @param state [BleGestureWake]
///   </li>
/// </ul>
- (void)onGestureWakeUpdate:(BleGestureWake * _Nonnull)bleGestureWake;
/// 设备返回LoveTap 用户列表时触发
/// \param loveTapUsers LoveTap 用户列表
///
- (void)onReadLoveTapUser:(NSArray<BleLoveTapUser *> * _Nonnull)loveTapUsers;
/// 设备端修改LoveTap用户时触发
/// \param loveTapUser LoveTap用户
///
- (void)onLoveTapUserUpdate:(BleLoveTapUser * _Nonnull)loveTapUser;
/// 设备返回LoveTap 数据触发
/// \param loveTap LoveTap 数据
///
- (void)onLoveTapUpdate:(BleLoveTap * _Nonnull)loveTap;
/// 设备端删除LoveTap用户时触发
/// \param id 要删除用户的mId
///
- (void)onLoveTapUserDelete:(NSInteger)id;
/// 设备返回吃药提醒列表时触发
/// \param medicationReminders 吃药提醒列表
///
- (void)onReadMedicationReminder:(NSArray<BleMedicationReminder *> * _Nonnull)medicationReminders;
/// 设备端修改吃药提醒时触发
/// \param medicationReminder 需要修改的吃药提醒
///
- (void)onMedicationReminderUpdate:(BleMedicationReminder * _Nonnull)medicationReminder;
/// 设备端删除吃药提醒时触发
/// \param id 需要删除的吃药提醒mId
///
- (void)onMedicationReminderDelete:(NSInteger)id;
/// 设备返回心率设置时触发
/// \param hrMonitoringSettings 心率设置数据
///
- (void)onReadHrMonitoringSettings:(BleHrMonitoringSettings * _Nonnull)hrMonitoringSettings;
/// 读取设备端单位设置
/// \param id 公制英制设置 0: 公制  1: 英制
///
- (void)onReadUnit:(NSInteger)id;
/// 设备返回第三方应用数据时触发
- (void)onBleThirdPartyDataUpdate:(BleThirdPartyData * _Nonnull)bleThirdPartyData;
/// 设备返回 [BleBodyData] 数据时候触发
- (void)onReadBodyStatus:(NSArray<BleBodyStatus *> * _Nonnull)bodyStatus;
/// 设备返回 [BleFeelingData] 数据时候触发
- (void)onReadMindStatus:(NSArray<BleMindStatus *> * _Nonnull)mindStatus;
/// 设备返回 摄入卡路里 [BleCalorieIntake] 数据时候触发
- (void)onReadCalorieIntake:(NSArray<BleCalorieIntake *> * _Nonnull)calorieIntakes;
/// 设备返回 食物均衡, 饮食均衡 [BleFoodBalance] 数据时候触发
- (void)onReadFoodBalance:(NSArray<BleFoodBalance *> * _Nonnull)foodBalances;
/// 设备返回 :酒精 数据时候触发
- (void)onReadBAC:(NSArray<BleBAC *> * _Nonnull)bacs;
/// 酒精测试结果, 固件会主动发送
- (void)onUpdateBAC:(NSArray<BleBAC *> * _Nonnull)bacs;
/// 当设备返回 [BleAvgHeartRate] 触发
- (void)onReadAvgHeartRate:(NSArray<BleAvgHeartRate *> * _Nonnull)heartRates;
/// 当设备返回 BlePackageStatus 触发
- (void)onReadPackageStatus:(BlePackageStatus * _Nonnull)packageStatus;
/// 当设备返回 alipaySettings
- (void)onReadAlipaySettings:(BleAlipaySettings * _Nonnull)alipaySettings;
/// 当设备返回 BleUserProfile
- (void)onReadUserPorfile:(BleUserProfile * _Nonnull)userProfile;
/// 设备返回目标步数时触发
- (void)onReadStepGoal:(NSInteger)stepGoal;
/// 返回当前小时制,  0: 24-hourly; 1: 12-hourly 小时制
- (void)onReadHourSystem:(NSInteger)value;
/// 返回背光数据值
- (void)onReadBacklight:(NSInteger)value;
/// 设备返回目标卡路里时触发
- (void)onReadCaloriesGoal:(NSInteger)value;
/// 设备返回目标距离时触发
- (void)onReadDistanceGoal:(NSInteger)value;
/// 设备返回目标距离时触发
- (void)onReadSleepGoal:(NSInteger)value;
/// 设备返回手表密码时触发
- (void)onReadWatchPassword:(BleSettingWatchPassword * _Nonnull)watchPassword;
/// 设备更新密码时触发
- (void)onWatchPasswordUpdate:(BleSettingWatchPassword * _Nonnull)watchPassword;
/// 设备返回录音文件
- (void)onReceiveRecordPacket:(BleRecordPacket * _Nonnull)recordPacket;
/// 设备返回导航状态
- (void)onNavigationState:(BleNaviInfo * _Nonnull)naviInfo;
/// 设备返回手表支持的语言列表时触发
- (void)onReadDeviceLanguages:(BleDeviceLanguages * _Nonnull)deviceLanguages;
/// 设备返回手表的SOS数据时候触发
- (void)onReadSOSSettings:(BleSOSSettings * _Nonnull)sosSettings;
/// 设备返回BleHealthCare时候触发
- (void)onReadGirlCareSettings:(BleHealthCare * _Nonnull)healthCare;
/// 当前语言时候触发
- (void)onReadLanguages:(NSInteger)value;
/// 设备返回游戏提醒时间时候触发
- (void)onReadGameTimeReminder:(BleGameTimeReminder * _Nonnull)gameTimeReminder;
/// 设备主动返回 BleDeviceSportData 触发
- (void)onDeviceSportDataUpdate:(BleDeviceSportData * _Nonnull)deviceSportData;
/// 设备主动返回 BleGirlCarePeriod 触发
- (void)onReadGirlCarePeriod:(BleGirlCarePeriod * _Nonnull)girlCarePeriod;
- (void)onGirlCarePeriodUpdate:(BleGirlCarePeriod * _Nonnull)girlCarePeriod;
/// 设备返回ANCS状态触发
- (void)didUpdateANCSAuthorization:(CBPeripheral * _Nonnull)peripheral SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 设备返回步数时触发
- (void)onStepGoalUpdate:(NSInteger)value;
/// 设备返回卡路里目标时触发
- (void)onCaloriesGoalUpdate:(NSInteger)value;
/// 设备返回距离目标时触发
- (void)onDistanceGoalUpdate:(NSInteger)value;
@end


/// 设置生理健康
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleHealthCare")
@interface BleHealthCare : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleHeartRate")
@interface BleHeartRate : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleHeartRateVariability")
@interface BleHeartRateVariability : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit9BleHmTime")
@interface BleHmTime : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleHrMonitoringSettings")
@interface BleHrMonitoringSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleHrWarningSettings")
@interface BleHrWarningSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleLanguagePackVersion")
@interface BleLanguagePackVersion : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleLocation")
@interface BleLocation : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleLogText")
@interface BleLogText : BleReadable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleLoveTap")
@interface BleLoveTap : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleLoveTapUser")
@interface BleLoveTapUser : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleMatchClassicSettings")
@interface BleMatchClassicSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleMatchLog")
@interface BleMatchLog : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛事件2
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleMatchLog2")
@interface BleMatchLog2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleMatchPeriod")
@interface BleMatchPeriod : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛周期2
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleMatchPeriod2")
@interface BleMatchPeriod2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛设置球员信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleMatchPlayer")
@interface BleMatchPlayer : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛球员设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleMatchPlayerSettings")
@interface BleMatchPlayerSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleMatchProSettings")
@interface BleMatchProSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleMatchRecord")
@interface BleMatchRecord : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛记录2
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleMatchRecord2")
@interface BleMatchRecord2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleMatchRecordPlayer")
@interface BleMatchRecordPlayer : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛记录团队信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleMatchRecordTeam")
@interface BleMatchRecordTeam : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 间歇训练设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit24BleMatchTrainingSettings")
@interface BleMatchTrainingSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 青年赛设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleMatchYouthSettings")
@interface BleMatchYouthSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 简化版本的吃药提醒, 药物提醒, 和闹钟类似
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleMedicationAlarm")
@interface BleMedicationAlarm : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 吃药提醒
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleMedicationReminder")
@interface BleMedicationReminder : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 心情数据
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleMindStatus")
@interface BleMindStatus : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleNaviInfo")
@interface BleNaviInfo : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleNewsFeed")
@interface BleNewsFeed : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleNoDisturbSettings")
@interface BleNoDisturbSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleNotificationSettings")
@interface BleNotificationSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit24BleNotificationSettings2")
@interface BleNotificationSettings2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BlePackageStatus")
@interface BlePackageStatus : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 手机定位成功返回数据给设备
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BlePhoneGPSSport")
@interface BlePhoneGPSSport : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BlePhoneWorkOut")
@interface BlePhoneWorkOut : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BlePhoneWorkOutStatus")
@interface BlePhoneWorkOutStatus : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BlePressure")
@interface BlePressure : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleQRcodeList")
@interface BleQRcodeList : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleQrcode2")
@interface BleQrcode2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 酒精浓度检测设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleRange")
@interface BleRange : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// APP控制设备进入心率，血压，血氧，压力测量模式
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleRealTimeMeasurement")
@interface BleRealTimeMeasurement : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleRecordPacket")
@interface BleRecordPacket : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleSOSSettings")
@interface BleSOSSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleScanner")
@interface BleScanner : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

@interface BleScanner (SWIFT_EXTENSION(SmartWatchCodingBleKit)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didUpdateANCSAuthorizationForPeripheral:(CBPeripheral * _Nonnull)peripheral SWIFT_AVAILABILITY(ios,introduced=13.0);
@end


/// 不支持[BleConnector.sendArray]，所以不能一次创建多个，也不能执行重置操作，
/// 也不支持读取操作。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleSchedule")
@interface BleSchedule : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit24BleSedentarinessSettings")
@interface BleSedentarinessSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleSettingWatchPassword")
@interface BleSettingWatchPassword : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleSleep")
@interface BleSleep : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit26BleSleepMonitoringSettings")
@interface BleSleepMonitoringSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 睡眠质量数据
/// 部分设备不支持本地计算睡眠数据，
/// 需要通过App同步设备数据后，
/// 计算睡眠数据（可参考 BleSleep.analyseSleep 和 BleSleep.getSleepStatusDuration 方法），
/// 然后将这些数据回传给设备
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleSleepQuality")
@interface BleSleepQuality : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleStock")
@interface BleStock : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleTemperature")
@interface BleTemperature : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleTemperatureDetecting")
@interface BleTemperatureDetecting : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleThirdPartyData")
@interface BleThirdPartyData : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit7BleTime")
@interface BleTime : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleTimeRange")
@interface BleTimeRange : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleTimeZone")
@interface BleTimeZone : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleUserProfile")
@interface BleUserProfile : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleVersion")
@interface BleVersion : BleReadable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleVoice")
@interface BleVoice : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleWashSettings")
@interface BleWashSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleWatchFaceBin")
@interface BleWatchFaceBin : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit26BleWatchFaceBinElementInfo")
@interface BleWatchFaceBinElementInfo : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleWatchFaceBinToHeader")
@interface BleWatchFaceBinToHeader : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleWatchFaceId")
@interface BleWatchFaceId : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleWeather")
@interface BleWeather : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleWeather2")
@interface BleWeather2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleWeatherForecast")
@interface BleWeatherForecast : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleWeatherForecast2")
@interface BleWeatherForecast2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleWeatherRealtime")
@interface BleWeatherRealtime : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleWeatherRealtime2")
@interface BleWeatherRealtime2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleWorkOut")
@interface BleWorkOut : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleWorkOut2")
@interface BleWorkOut2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleWorldClock")
@interface BleWorldClock : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end





SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16WatchFaceBuilder")
@interface WatchFaceBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
